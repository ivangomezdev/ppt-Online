{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,Q,C,I,I,E,I,K,E,W,C,E,a,C,C,GCIO,IAAM,EAAQ,CACnB,KAAK,GACL,aAAc,CAAA,EACd,SAAS,GACT,YAAY,GACZ,YAAY,CAAC,EACb,OAAO,GACP,YAAY,GACZ,cAAc,CAAA,EACd,SAAS,GACT,SAAU,GACV,aAAc,CAAE,GAAI,EAAG,GAAI,CAAE,EAC7B,UAAW,EAAE,CACb,QAAS,EAAE,CAKX,WAAY,WACV,OAAO,IAAI,CAAC,OAAO,AACrB,EAEA,gBAAiB,WACf,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,AAAC,GAAa,IACvC,EAGA,WAAY,WACV,IAAI,CAAC,QAAQ,CAAG,GAChB,IAAI,CAAC,OAAO,CAAG,EAAE,CACjB,IAAI,CAAC,eAAe,EAEvB,EAGC,eAAgB,WAEd,IAAM,EAAO,KAAK,KAAK,CAAC,AAAgB,EAAhB,KAAK,MAAM,GAC/B,AAAS,CAAA,IAAT,EAEF,IAAI,CAAC,QAAQ,CAAG,SACP,AAAS,IAAT,EACT,IAAI,CAAC,QAAQ,CAAG,QACE,IAAT,GACT,CAAA,IAAI,CAAC,QAAQ,CAAG,QADX,CAIT,EAIA,UAAW,SAAU,CAAiB,EACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EACtB,EAGA,cAAe,SAAU,CAAc,EACrC,QAAQ,GAAG,CAAC,8BAA+B,GAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GACZ,AAAW,aAAX,GACA,IAAI,CAAC,YAAY,CAAC,EAAE,GACpB,QAAQ,GAAG,CAAC,IAAI,CAAC,YAAY,GAEX,YAAX,GACP,IAAI,CAAC,YAAY,CAAC,EAAE,GAExB,IAAI,CAAC,eAAe,EACxB,EAGE,cAAe,WAGb,GAFA,QAAQ,GAAG,CAAC,2BAA4B,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,QAAQ,EAEhE,CAAC,IAAI,CAAC,QAAQ,EAAI,CAAC,IAAI,CAAC,QAAQ,CAAE,CAClC,QAAQ,KAAK,CAAC,gEACd,MACJ,CAEI,IAAI,CAAC,QAAQ,GAAK,IAAI,CAAC,QAAQ,EAC/B,QAAQ,GAAG,CAAC,UACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAElB,AAAmB,WAAnB,IAAK,CAAC,QAAQ,EAAiB,AAAkB,WAAlB,IAAI,CAAC,QAAQ,EAC3C,AAAkB,UAAlB,IAAI,CAAC,QAAQ,EAAgB,AAAkB,WAAlB,IAAI,CAAC,QAAQ,EAC1C,AAAkB,WAAlB,IAAI,CAAC,QAAQ,EAAiB,AAAkB,UAAlB,IAAI,CAAC,QAAQ,EAE5C,QAAQ,GAAG,CAAC,YACZ,IAAI,CAAC,aAAa,CAAC,cAEnB,QAAQ,GAAG,CAAC,WACZ,IAAI,CAAC,aAAa,CAAC,YAEvB,QAAQ,GAAG,CAAC,uBAAwB,IAAI,CAAC,OAAO,CACpD,CAGA,C,G,E","sources":["<anon>","state/state.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireb11a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireb11a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"joAEj\", function(module, exports) {\n\n$parcel$export(module.exports, \"state\", () => $683bdd252c9315ec$export$ca000e230c0caa3e);\n//Declaro los valores a tipar con un TYPE // declare a value w/a type\nconst $683bdd252c9315ec$export$ca000e230c0caa3e = {\n    name: \"\",\n    transitioned: false,\n    playerId: \"\",\n    playerTwoId: \"\",\n    playerNames: {},\n    roomId: \"\",\n    roomLargeId: \"\",\n    createNewRoom: false,\n    p1Choice: \"\",\n    p2Choice: \"\",\n    matchCounter: {\n        pc: 0,\n        me: 0\n    },\n    listeners: [],\n    results: [],\n    //obtengo el resultado\n    getResults: function() {\n        return this.results;\n    },\n    notifyListeners: function() {\n        this.listeners.forEach((listener)=>listener());\n    },\n    resetState: function() {\n        this.p1Choice = \"\";\n        this.results = [];\n        this.notifyListeners();\n    },\n    //funcion donde la pc escoge entre p,p o t // function where the pc chooses between r,p or s\n    pcSelectChoice: function() {\n        //buscar un numero aleatorio entre 0 y 2 // search a aleatory number between 0 and 2\n        const ppot = Math.floor(Math.random() * 3);\n        if (ppot === 0) // si mi numero aleatorio es x entonces la eleccion es... // if my aleatory number is x so the election is\n        this.p2Choice = \"piedra\";\n        else if (ppot === 1) this.p2Choice = \"papel\";\n        else if (ppot === 2) this.p2Choice = \"tijera\";\n    },\n    //funcion donde el usuario escoge entre p,p o t // function where the user chooses between r,p or s\n    subscribe: function(listener) {\n        this.listeners.push(listener);\n    },\n    //manejar victoria/derrota // handle victory or lose\n    handleVictory: function(result) {\n        console.log(\"Manejando victoria/derrota:\", result);\n        this.results.push(result);\n        if (result === \"Victoria\") {\n            this.matchCounter.me++;\n            console.log(this.matchCounter);\n        } else if (result === \"Derrota\") this.matchCounter.pc++;\n        this.notifyListeners(); // Notifica a los suscriptores\n    },\n    //procesar resultado // process results\n    processResult: function() {\n        console.log(\"Ejecutando processResult\", this.p1Choice, this.p2Choice);\n        if (!this.p1Choice || !this.p2Choice) {\n            console.error(\"No se puede procesar el resultado porque falta una elecci\\xf3n.\");\n            return;\n        }\n        if (this.p1Choice === this.p2Choice) {\n            console.log(\"Empate\");\n            this.results.push(\"Empate\");\n        } else if (this.p1Choice === \"piedra\" && this.p2Choice === \"tijera\" || this.p1Choice === \"papel\" && this.p2Choice === \"piedra\" || this.p1Choice === \"tijera\" && this.p2Choice === \"papel\") {\n            console.log(\"Victoria\");\n            this.handleVictory(\"Victoria\");\n        } else {\n            console.log(\"Derrota\");\n            this.handleVictory(\"Derrota\");\n        }\n        console.log(\"Resultados actuales:\", this.results);\n    }\n};\n\n});\n\n\nparcelRequire(\"joAEj\");\n\n//# sourceMappingURL=index.db0c325e.js.map\n","//Declaro los valores a tipar con un TYPE // declare a value w/a type\r\n\r\ntype Result = \"Victoria\" | \"Derrota\";\r\n//creo un estado // create a state\r\nexport const state = {\r\n  name:\"\",\r\n  transitioned: false,\r\n  playerId:\"\" as any,\r\n  playerTwoId:\"\" as any,\r\n  playerNames:{},\r\n  roomId:\"\",\r\n  roomLargeId:\"\",\r\n  createNewRoom:false,\r\n  p1Choice:\"\",\r\n  p2Choice: \"\",\r\n  matchCounter: { pc: 0, me: 0 }, \r\n  listeners: [],\r\n  results: [],\r\n  \r\n\r\n  \r\n  //obtengo el resultado\r\n  getResults: function () {\r\n    return this.results;\r\n  },\r\n  \r\n  notifyListeners: function () {\r\n    this.listeners.forEach((listener) => listener());\r\n  },\r\n\r\n\r\n  resetState: function () {\r\n    this.p1Choice = \"\";\r\n    this.results = [];\r\n    this.notifyListeners();\r\n\r\n },\r\n\r\n  //funcion donde la pc escoge entre p,p o t // function where the pc chooses between r,p or s\r\n  pcSelectChoice: function () {\r\n    //buscar un numero aleatorio entre 0 y 2 // search a aleatory number between 0 and 2\r\n    const ppot = Math.floor(Math.random() * 3);\r\n    if (ppot === 0) {\r\n      // si mi numero aleatorio es x entonces la eleccion es... // if my aleatory number is x so the election is\r\n      this.p2Choice = \"piedra\";\r\n    } else if (ppot === 1) {\r\n      this.p2Choice = \"papel\";\r\n    } else if (ppot === 2) {\r\n      this.p2Choice = \"tijera\";\r\n    }\r\n    \r\n  },\r\n\r\n  //funcion donde el usuario escoge entre p,p o t // function where the user chooses between r,p or s\r\n\r\n  subscribe: function (listener:Function) {\r\n    this.listeners.push(listener);\r\n  },\r\n\r\n  //manejar victoria/derrota // handle victory or lose\r\n  handleVictory: function (result: Result) {\r\n    console.log(\"Manejando victoria/derrota:\", result);\r\n  this.results.push(result)\r\n    if (result === \"Victoria\") {\r\n        this.matchCounter.me++;\r\n        console.log(this.matchCounter);\r\n        \r\n    } else if (result === \"Derrota\") {\r\n        this.matchCounter.pc++;\r\n    }\r\n    this.notifyListeners(); // Notifica a los suscriptores\r\n},\r\n\r\n  //procesar resultado // process results\r\n  processResult: function () {\r\n    console.log(\"Ejecutando processResult\", this.p1Choice, this.p2Choice);\r\n\r\n    if (!this.p1Choice || !this.p2Choice) {\r\n        console.error(\"No se puede procesar el resultado porque falta una elecci√≥n.\");\r\n        return;\r\n    }\r\n\r\n    if (this.p1Choice === this.p2Choice) {\r\n        console.log(\"Empate\");\r\n        this.results.push(\"Empate\");\r\n    } else if (\r\n        (this.p1Choice === \"piedra\" && this.p2Choice === \"tijera\") ||\r\n        (this.p1Choice === \"papel\" && this.p2Choice === \"piedra\") ||\r\n        (this.p1Choice === \"tijera\" && this.p2Choice === \"papel\")\r\n    ) {\r\n        console.log(\"Victoria\");\r\n        this.handleVictory(\"Victoria\");\r\n    } else {\r\n        console.log(\"Derrota\");\r\n        this.handleVictory(\"Derrota\");\r\n    }\r\n    console.log(\"Resultados actuales:\", this.results);\r\n},\r\n\r\n\r\n};\r\n\r\n\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$683bdd252c9315ec$export$ca000e230c0caa3e","set","s","enumerable","configurable","name","transitioned","playerId","playerTwoId","playerNames","roomId","roomLargeId","createNewRoom","p1Choice","p2Choice","matchCounter","pc","me","listeners","results","getResults","notifyListeners","forEach","listener","resetState","pcSelectChoice","ppot","Math","floor","random","subscribe","push","handleVictory","result","console","log","processResult","error"],"version":3,"file":"index.db0c325e.js.map"}
{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,S,E,E,S,E,E,QCMA,OAAM,UAAiB,YACrB,aAAc,CACZ,KAAK,GAGL,IAAM,EAAO,SAAS,aAAa,CAAC,SAEhC,GACF,CAAA,EAAK,SAAS,CAAG,EADnB,EAKA,IAAM,EAAO,SAAS,aAAa,CAAC,OAC9B,EAAQ,SAAS,aAAa,CAAC,MAC/B,EAAM,SAAS,aAAa,CAAC,UAC7B,EAAc,SAAS,aAAa,CAAC,gBASrC,EAAQ,SAAS,aAAa,CAAC,QAGrC,CAAA,EAAM,WAAW,CAAG,CAAC;AAArB,qEAC8D,CAAC,CAC/D,EAAI,WAAW,CAAG,QAElB,EAAI,YAAY,CAAC,aAAc,iBAG/B,EAAM,WAAW,CAAG;AAApB;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A,IAsCA,CAAC,CAGD,EAAK,SAAS,CAAC,GAAG,CAAC,eACnB,EAAI,SAAS,CAAC,GAAG,CAAC,cAClB,EAAM,SAAS,CAAC,GAAG,CAAC,aAGpB,EAAI,gBAAgB,CAAC,QAAS,AAAC,IAK7B,IAAM,EAAQ,AAAA,CAAA,EAAA,EAAA,GAAE,AAAF,EACZ,EAAA,EAAC,CACD,CAAC,MAAM,EAAE,AAAA,EAAA,KAAI,CAAE,WAAW,CAAC,aAAa,EAAE,AAAA,EAAA,KAAI,CAAE,QAAQ,CAAC,CAAC,EAK5D,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,EAXS,CACd,MAAO,CAAA,CACT,GAUG,IAAI,CAAC,KACJ,QAAQ,GAAG,CAAC,oCACZ,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,EAAK,mBACP,GACC,KAAK,CAAC,AAAC,IACN,QAAQ,KAAK,CAAC,gCAAiC,EACjD,EACJ,GAEA,IAAM,EAAU,AAAA,CAAA,EAAA,EAAA,GAAE,AAAF,EAAI,EAAA,EAAC,CAAG,CAAC,MAAM,EAAE,AAAA,EAAA,KAAI,CAAE,WAAW,CAAC,YAAY,CAAC,EAEhE,AAAA,CAAA,EAAA,EAAA,GAAE,AAAF,EAAI,GAAS,IAAI,CAAC,AAAC,IACjB,IAAM,EAAU,EAAS,GAAG,GACxB,EAAU,EAEd,GAAI,AAA+B,GAA/B,OAAO,IAAI,CAAC,GAAS,MAAM,CAC7B,IAAK,IAAM,KAAO,EAAS,CACzB,IAAM,EAAU,CAAO,CAAC,EAAI,AAE5B,AAAA,CAAA,EAAA,KAAI,CAAE,WAAW,CAAC,CAAC,MAAM,EAAE,EAAQ,CAAC,CAAC,CAAG,EAAQ,IAAI,CACpD,GACF,CAEJ,GAGA,EAAK,WAAW,CAAC,GACjB,EAAK,WAAW,CAAC,GACjB,EAAK,WAAW,CAAC,GACjB,EAAK,WAAW,CAAC,GAvGf,EAAY,KAAK,CAAC,eAAe,CAAE,wBAyGvC,CACF,CAGA,eAAe,MAAM,CAAC,mBAAoB","sources":["<anon>","pages/instructions.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireb11a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireb11a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $gdelx = parcelRequire(\"gdelx\");\n\nvar $kOHZq = parcelRequire(\"kOHZq\");\n\nvar $6SeQg = parcelRequire(\"6SeQg\");\n\nvar $joAEj = parcelRequire(\"joAEj\");\nclass $d599c08ae096072c$var$Instruct extends HTMLElement {\n    constructor(){\n        super();\n        // Crear shadow root\n        const root = document.querySelector(\"#root\");\n        if (root) root.innerHTML = \"\";\n        // Crear los elementos\n        const cont = document.createElement(\"div\");\n        const title = document.createElement(\"h1\");\n        const btn = document.createElement(\"button\");\n        const buttonsCont = document.querySelector(\".index__cont\");\n        const changeColor = ()=>{\n            buttonsCont.style.backgroundColor = \"rgba(255, 255, 255, 0)\";\n        };\n        // Crear estilo único y consolidados\n        const style = document.createElement(\"style\");\n        // Agregar contenido\n        title.textContent = `Presion\\xe1 jugar\r\ny eleg\\xed: piedra, papel o tijera antes de que pasen los 3 segundos.`;\n        btn.textContent = \"Jugar\";\n        btn.setAttribute(\"aria-label\", \"Empezar juego\"); // Atributo de accesibilidad para el botón\n        // Estilos CSS en un solo bloque\n        style.textContent = `\r\n      .start__cont {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        margin-top:25px;\r\n        margin-bottom:80px;\r\n      }\r\n\r\n      .start__btn {\r\n        width: 320px;\r\n        height: 84px;\r\n        background-color: #006cfc;\r\n        border: solid 5px #001997;\r\n        font-family: \"Odibee Sans\", sans-serif;\r\n        color: #d8fcfc;\r\n        border-radius: 10px;\r\n        font-size: 45px;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n      }\r\n\r\n      .start__btn:hover {\r\n        background-color: #005bb5;\r\n      }\r\n\r\n      .start__h1 {\r\n        width: 400px;\r\n        margin: 0 auto;\r\n        color: black;\r\n        font-size: 60px;\r\n        text-align: center;\r\n        font-weight: 700;\r\n        line-height: 1.1;\r\n        padding: 60px;\r\n      }\r\n    `;\n        // Agregar clases y elementos al contenedor\n        cont.classList.add(\"start__cont\");\n        btn.classList.add(\"start__btn\");\n        title.classList.add(\"start__h1\");\n        //update start value // actualizar valor start\n        btn.addEventListener(\"click\", (e)=>{\n            const updates = {\n                start: true\n            };\n            const p1Ref = (0, $gdelx.ref)((0, $6SeQg.db), `rooms/${(0, $joAEj.state).roomLargeId}/currentGame/${(0, $joAEj.state).playerId}`);\n            (0, $gdelx.update)(p1Ref, updates).then(()=>{\n                console.log(\"Campo actualizado correctamente.\");\n                (0, $kOHZq.goTo)(\"/waitOtherPlayer\");\n            }).catch((error)=>{\n                console.error(\"Error al actualizar el campo:\", error);\n            });\n        });\n        const roomRef = (0, $gdelx.ref)((0, $6SeQg.db), `rooms/${(0, $joAEj.state).roomLargeId}/currentGame`);\n        (0, $gdelx.get)(roomRef).then((snapshot)=>{\n            const dataVal = snapshot.val();\n            let counter = 1;\n            //si hay 2 usuarios en la sala\n            if (Object.keys(dataVal).length == 2) for(const key in dataVal){\n                const element = dataVal[key];\n                (0, $joAEj.state).playerNames[`player${counter}`] = element.name;\n                counter++;\n            }\n        });\n        // Append al shadow DOM\n        root.appendChild(style);\n        cont.appendChild(title);\n        cont.appendChild(btn);\n        root.appendChild(cont);\n        changeColor();\n    }\n}\n// Definir el componente\ncustomElements.define(\"instructive-cont\", $d599c08ae096072c$var$Instruct);\n\n\n//# sourceMappingURL=index.ade7c3b0.js.map\n","import { get, onValue, ref, update } from \"firebase/database\";\r\nimport { goTo } from \"../src/index\";\r\nimport { db } from \"../src/firebase.config\";\r\nimport { state } from \"../state/state\";\r\nimport { p1Ref } from \"../controllers/insOnlineController\";\r\n\r\nclass Instruct extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n\r\n    // Crear shadow root\r\n    const root = document.querySelector(\"#root\");\r\n\r\n    if (root) {\r\n      root.innerHTML = \"\";\r\n    }\r\n    // Crear los elementos\r\n\r\n    const cont = document.createElement(\"div\");\r\n    const title = document.createElement(\"h1\");\r\n    const btn = document.createElement(\"button\");\r\n    const buttonsCont = document.querySelector(\".index__cont\") as HTMLElement\r\n\r\n  const  changeColor = () =>{\r\n\r\n      buttonsCont.style.backgroundColor =\"rgba(255, 255, 255, 0)\"\r\n    }\r\n\r\n\r\n    // Crear estilo único y consolidados\r\n    const style = document.createElement(\"style\");\r\n\r\n    // Agregar contenido\r\n    title.textContent = `Presioná jugar\r\ny elegí: piedra, papel o tijera antes de que pasen los 3 segundos.`;\r\n    btn.textContent = \"Jugar\";\r\n\r\n    btn.setAttribute(\"aria-label\", \"Empezar juego\"); // Atributo de accesibilidad para el botón\r\n\r\n    // Estilos CSS en un solo bloque\r\n    style.textContent = `\r\n      .start__cont {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        margin-top:25px;\r\n        margin-bottom:80px;\r\n      }\r\n\r\n      .start__btn {\r\n        width: 320px;\r\n        height: 84px;\r\n        background-color: #006cfc;\r\n        border: solid 5px #001997;\r\n        font-family: \"Odibee Sans\", sans-serif;\r\n        color: #d8fcfc;\r\n        border-radius: 10px;\r\n        font-size: 45px;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n      }\r\n\r\n      .start__btn:hover {\r\n        background-color: #005bb5;\r\n      }\r\n\r\n      .start__h1 {\r\n        width: 400px;\r\n        margin: 0 auto;\r\n        color: black;\r\n        font-size: 60px;\r\n        text-align: center;\r\n        font-weight: 700;\r\n        line-height: 1.1;\r\n        padding: 60px;\r\n      }\r\n    `;\r\n\r\n    // Agregar clases y elementos al contenedor\r\n    cont.classList.add(\"start__cont\");\r\n    btn.classList.add(\"start__btn\");\r\n    title.classList.add(\"start__h1\");\r\n\r\n    //update start value // actualizar valor start\r\n    btn.addEventListener(\"click\", (e) => {\r\n      const updates = {\r\n        start: true, // Cambiar el valor de \"start\"\r\n      };\r\n\r\n      const p1Ref = ref(\r\n        db,\r\n        `rooms/${state.roomLargeId}/currentGame/${state.playerId}`\r\n      );\r\n\r\n\r\n\r\n      update(p1Ref, updates)\r\n        .then(() => {\r\n          console.log(\"Campo actualizado correctamente.\");\r\n          goTo(\"/waitOtherPlayer\");\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error al actualizar el campo:\", error);\r\n        });\r\n    });\r\n\r\n    const roomRef = ref(db, `rooms/${state.roomLargeId}/currentGame`);\r\n\r\n    get(roomRef).then((snapshot) => {\r\n      const dataVal = snapshot.val();\r\n      let counter = 1;\r\n      //si hay 2 usuarios en la sala\r\n      if (Object.keys(dataVal).length == 2) {\r\n        for (const key in dataVal) {\r\n          const element = dataVal[key];\r\n\r\n          state.playerNames[`player${counter}`] = element.name;\r\n          counter++;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Append al shadow DOM\r\n    root.appendChild(style);\r\n    cont.appendChild(title);\r\n    cont.appendChild(btn);\r\n    root.appendChild(cont);\r\n    changeColor()\r\n  }\r\n}\r\n\r\n// Definir el componente\r\ncustomElements.define(\"instructive-cont\", Instruct);\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$gdelx","$kOHZq","$6SeQg","$joAEj","$d599c08ae096072c$var$Instruct","HTMLElement","constructor","root","document","querySelector","innerHTML","cont","createElement","title","btn","buttonsCont","style","textContent","setAttribute","classList","add","addEventListener","e","p1Ref","ref","db","state","roomLargeId","playerId","update","start","then","console","log","goTo","catch","error","roomRef","get","snapshot","dataVal","val","counter","Object","keys","length","key","element","playerNames","name","appendChild","backgroundColor","customElements","define"],"version":3,"file":"index.ade7c3b0.js.map"}